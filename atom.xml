<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fyh-code.github.io</id>
    <title>Gridea</title>
    <updated>2021-04-02T06:18:52.569Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fyh-code.github.io"/>
    <link rel="self" href="https://fyh-code.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://fyh-code.github.io/images/avatar.png</logo>
    <icon>https://fyh-code.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[【算法】电话号码的字母组合]]></title>
        <id>https://fyh-code.github.io/post/suan-fa-dian-hua-hao-ma-de-zi-mu-zu-he/</id>
        <link href="https://fyh-code.github.io/post/suan-fa-dian-hua-hao-ma-de-zi-mu-zu-he/">
        </link>
        <updated>2021-04-01T11:02:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。</p>
<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。<br>
<img src="https://fyh-code.github.io/post-images/1617275101520.png" alt="" loading="lazy"></p>
<p>示例 1：</p>
<pre><code>输入：digits = &quot;23&quot;
输出：[&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]
</code></pre>
<p>示例 2：</p>
<pre><code>输入：digits = &quot;&quot;
输出：[]
</code></pre>
<p>示例 3：</p>
<pre><code>输入：digits = &quot;2&quot;
输出：[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]
</code></pre>
<h1 id="题解">题解</h1>
<pre><code class="language-javascript">/**
 * @param {string} digits
 * @return {string[]}
 */
const numMap = {
    '2': 'abc',
    '3': 'def',
    '4': 'ghi',
    '5': 'jkl',
    '6': 'mno',
    '7': 'pqrs',
    '8': 'tuv',
    '9': 'wxyz'
}
var letterCombinations = function(digits) {
    const res = []
    if (!digits) return res
    function func(index, temp) {
        if (index &gt;= digits.length) {
            res.push(temp)
            return
        }
        const d = digits[index]
        const str = numMap[d]
        for (let i = 0;i &lt; str.length;i++) {
            func(index + 1, temp + str[i])
        }
    }
    func(0, '')
    return res
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【算法】分割回文串]]></title>
        <id>https://fyh-code.github.io/post/suan-fa-fen-ge-hui-wen-chuan/</id>
        <link href="https://fyh-code.github.io/post/suan-fa-fen-ge-hui-wen-chuan/">
        </link>
        <updated>2021-04-01T11:02:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 回文串 。返回 s 所有可能的分割方案。</p>
<p>回文串 是正着读和反着读都一样的字符串。</p>
<p></p>
<p><em>示例 1：</em></p>
<pre><code>输入：s = &quot;aab&quot;
输出：[[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;],[&quot;aa&quot;,&quot;b&quot;]]
</code></pre>
<p><em>示例 2：</em></p>
<pre><code>输入：s = &quot;a&quot;
输出：[[&quot;a&quot;]]
</code></pre>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/palindrome-partitioning<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="题解">题解</h1>
<pre><code class="language-javascript">/**
 * @param {string} s
 * @return {string[][]}
 */
function isHuiWen(str) {
  for (let i = 0;i &lt; str.length;i++) {
    if (str[i] !== str[str.length - i - 1]) {
      return false
    }
  }
  return true
}
var partition = function(s) {
  const res = []
  function func(index, arr) {
    if (index &gt;= s.length) {
      res.push([...arr])
      return
    }
    for (let i = index;i &lt; s.length;i++) {
      const str = s.slice(index, i + 1)
      // 判断是否是回文
      if (isHuiWen(str)) {
        // 记录当前字符串
        arr.push(str)
        // 从字符串最后继续向后递归
        func(i + 1, arr)

        // 回溯
        arr.pop()
      }
    }
  }
  func(0, [])
  return res
};
</code></pre>
]]></content>
    </entry>
</feed>